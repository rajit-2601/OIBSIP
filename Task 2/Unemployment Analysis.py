# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sc4foD53W9nI5ix1qZ7DBt4lsarDAhX5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import datetime as dt
import calendar

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Unemployment in India.csv')
df.head()

df.isnull().sum()

df.isnull().sum().sum()

df.shape

df.info()

df.duplicated().sum()

df.columns

df.describe()

df['Region'].value_counts()

sns.heatmap(df[[' Estimated Unemployment Rate (%)',' Estimated Employed',' Estimated Labour Participation Rate (%)']].corr(),cmap="YlGnBu",annot=True)

fig = px.box(df,x='Region',y=' Estimated Unemployment Rate (%)',color='Region',title='Unemployment rate')
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

Region = df.groupby(['Region'])[[' Estimated Unemployment Rate (%)',' Estimated Employed',' Estimated Labour Participation Rate (%)']].mean()
Region = pd.DataFrame(Region).reset_index()

fig = px.bar(Region, x='Region', y=' Estimated Unemployment Rate (%)', color='Region', title='Average unemploment Rate (Region)')
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

#checking relation using just first 50 rows to keep the plot readable
Employed = df[' Estimated Employed'].iloc[:50]
Unemployed = df[' Estimated Unemployment Rate (%)'].iloc[:50]

#normalize the employed in range 1 to 20
Employed = (Employed - Employed.min())/(Employed.max() - Employed.min()) * 19 + 1

plt.figure(figsize=(8,6))
plt.plot(Employed, label='Employed', color='blue')
plt.plot(Unemployed, label='Unemployed', color='red')
plt.show

df.Region.unique()

fig = px.scatter_matrix(df,dimensions=[' Estimated Unemployment Rate (%)',' Estimated Employed',' Estimated Labour Participation Rate (%)'], color='Region')
fig.show()

df[' Date'] = pd.to_datetime(df[' Date'], dayfirst=True)
df['month_int'] =  df[' Date'].dt.month.apply(lambda x:  str(x)[:1])
df.head()

IND =  df.groupby(["month_int"])[[' Estimated Unemployment Rate (%)',' Estimated Employed',' Estimated Labour Participation Rate (%)']].mean()
IND = pd.DataFrame(IND).reset_index()

month = IND.month_int
unemployment_rate = IND[' Estimated Unemployment Rate (%)']
labour_participation_rate = IND[' Estimated Labour Participation Rate (%)']
fig = go.Figure()
fig.add_trace(go.Bar(x = month, y = unemployment_rate, name= "Unemployment Rate"))
fig.add_trace(go.Bar(x = month, y = labour_participation_rate, name= "Labour Participation Rate"))
fig.update_layout(title="Uneployment Rate and Labour Participation Rate")
fig.show()

fig = px.bar(IND, x='month_int',y=' Estimated Employed', color='month_int',title='estimated employed people from Jan 2020 to Oct 2020')
fig.show()

unemployment = df.groupby(['Region'])[' Estimated Unemployment Rate (%)'].mean().reset_index()
unemployment.head()

fig = px.sunburst(unemployment, path=['Region'], values=' Estimated Unemployment Rate (%)',title= 'Unemployment rate in every State and Region', height=650)
fig.show()

#calculate correlation
df[' Estimated Employed'].corr(df[' Estimated Unemployment Rate (%)'])

#drop estimated employed columns
df = df.drop([' Estimated Employed'], axis=1)
df.head()

group = df.groupby(['Region','Area']).agg({' Estimated Unemployment Rate (%)': 'mean'})
group





